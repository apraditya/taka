# This test seems inconsistent with what the specification says. 
#
# The specification does not specify that "event listeners can never be 
# invoked after being removed" as the test case comment below suggests. If the
# comment does not refer to the specification but to implementation concerns
# it obviously is not true either since it certainly is possible to invoke a
# listener even though it has been removed from a target once the event 
# processing flow has been started.
#
# Instead the specification actually talks about listeners that are *added*
# to targets after an event has been dispatched:
#
#   "If an EventListener is added to an EventTarget while it is processing an
#   event, it will not be triggered by the current actions but may be triggered
#   during a later stage of event flow, such as the bubbling phase."



###
# This Ruby source file was generated by test-to-ruby.xsl
# and is a derived work from the source document.
# The source document contained the following notice:
=begin


Copyright (c) 2001 World Wide Web Consortium,
(Massachusetts Institute of Technology, Institut National de
Recherche en Informatique et en Automatique, Keio University).  All
Rights Reserved.  This program is distributed under the W3C's Software
Intellectual Property License.  This program is distributed in the
hope that it will be useful, but WITHOUT ANY WARRANTY; without even
the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE.

See W3C License http://www.w3.org/Consortium/Legal/ for more details.


=end
#

require File.expand_path('../../../../w3c_helper', __FILE__)

###
# Two listeners are registered on the same target, each of which will remove both itself and
# the other on the first event.  Only one should see the event since event listeners
# can never be invoked after being removed.
# @author Curt Arnold
# see[http://www.w3.org/TR/DOM-Level-2-Events/events#Events-EventTarget-dispatchEvent]
# see[http://www.w3.org/TR/DOM-Level-2-Events/events#xpointer(id('Events-EventTarget-dispatchEvent')/raises/exception[@name='EventException']/descr/p[substring-before(.,':')='UNSPECIFIED_EVENT_TYPE_ERR'])]
##
DOMTestCase('dispatchEvent13') do

  ###
  # Constructor.
  # @param factory document factory, may not be null
  # @throws org.w3c.domts.DOMTestIncompatibleException Thrown if test is not compatible with parser configuration
  ##
  def setup
    ##
    ##   check if loaded documents are supported for content type
    ##
    contentType = getContentType()
    preload(contentType, "hc_staff", true)
  end

  class EventListener36044232
    attr_reader :events, :listeners

    def initialize(events, listeners)
      @events, @listeners = events, listeners
    end

    def handleEvent(event)
      events << event
      listeners.each do |listener|
        event.currentTarget.removeEventListener("foo", listener, false)
      end
    end
  end

  ###
  # Runs the test case.
  # @throws Throwable Any uncaught exception causes test to fail
  #
  def test_dispatchEvent13
    listeners = []
    events = []

    listener1 = EventListener36044232.new(events, listeners)
    listener2 = EventListener36044232.new(events, listeners)

    listeners << listener1
    listeners << listener2

    doc = load_document("hc_staff", true)
    doc.addEventListener("foo", listener1, false)
    doc.addEventListener("foo", listener2, false)

    evt = doc.createEvent("Events")
    evt.initEvent("foo", true, false)
    doc.dispatchEvent(evt)

    assertSize("eventCount", 1, events)

  end

  ###
  # Gets URI that identifies the test.
  # @return uri identifier of test
  #
  def targetURI
    "http://www.w3.org/2001/DOM-Test-Suite/tests/Level-1/dispatchEvent13"
  end
end

